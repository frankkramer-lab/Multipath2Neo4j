% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Getter_Functions.R
\name{getRelationshipAttributes}
\alias{getRelationshipAttributes}
\title{Get the attributes of the relationships connecting two nodes, or all nodes in a Neo4j graph}
\usage{
getRelationshipAttributes(
  connection,
  returned_started_node_property,
  returned_end_node_property,
  started_node_property = NULL,
  started_node_property_value = NULL,
  end_node_property = NULL,
  end_node_property_value = NULL
)
}
\arguments{
\item{connection}{The Neo4j connection object.}

\item{returned_started_node_property}{The name of the attribute identifying the started node.}

\item{returned_end_node_property}{The name of the attribute identifying the end node.}

\item{started_node_property}{The started node property key name to be identified by.}

\item{started_node_property_value}{The started node property key value to be found within.}

\item{end_node_property}{The end node property key name to be identified by.}

\item{end_node_property_value}{The end node property key value to be found within.}
}
\value{
A dataframe containing the relationships with their attributes. If both nodes' properties and values are missing,
it returns all the relationships with their attributes. If the started node's property name and value are given,
it returns all the relationships starting from this node. If the end node's property name and value are given,
it returns all the relationships ending with this node.
}
\description{
Get the attributes of the relationships connecting two nodes, or all nodes in a Neo4j graph
}
\examples{
\dontrun{
#To get all the edges with their attributes
edges = getRelationshipAttributes(connection, "name", "name")

#To get all the edges starting from the node of name Complex1 with their attributes
edges = getRelationshipAttributes(connection, "name", "name", "name", "Complex1")

#To get all the edges ending with the node of name Complex10 with their attributes
edges = getRelationshipAttributes(connection, "name", "name",
end_node_property = "name", end_node_property_value = "Complex10")
}
}
